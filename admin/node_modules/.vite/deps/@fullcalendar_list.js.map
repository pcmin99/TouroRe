{
  "version": 3,
  "sources": ["../../@fullcalendar/list/internal.js", "../../@fullcalendar/list/index.js"],
  "sourcesContent": ["import { BaseComponent, getUniqueDomId, getDateMeta, buildNavLinkAttrs, ContentContainer, getDayClassNames, formatDayString, createFormatter, EventContainer, getSegAnchorAttrs, isMultiDayRange, buildSegTimeText, DateComponent, memoize, ViewContainer, Scroller, NowTimer, sortEventSegs, getSegMeta, sliceEventStore, intersectRanges, startOfDay, addDays, injectStyles } from '@fullcalendar/core/internal.js';\r\nimport { createElement, Fragment } from '@fullcalendar/core/preact.js';\r\n\r\nclass ListViewHeaderRow extends BaseComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            textId: getUniqueDomId(),\r\n        };\r\n    }\r\n    render() {\r\n        let { theme, dateEnv, options, viewApi } = this.context;\r\n        let { cellId, dayDate, todayRange } = this.props;\r\n        let { textId } = this.state;\r\n        let dayMeta = getDateMeta(dayDate, todayRange);\r\n        // will ever be falsy?\r\n        let text = options.listDayFormat ? dateEnv.format(dayDate, options.listDayFormat) : '';\r\n        // will ever be falsy? also, BAD NAME \"alt\"\r\n        let sideText = options.listDaySideFormat ? dateEnv.format(dayDate, options.listDaySideFormat) : '';\r\n        let renderProps = Object.assign({ date: dateEnv.toDate(dayDate), view: viewApi, textId,\r\n            text,\r\n            sideText, navLinkAttrs: buildNavLinkAttrs(this.context, dayDate), sideNavLinkAttrs: buildNavLinkAttrs(this.context, dayDate, 'day', false) }, dayMeta);\r\n        // TODO: make a reusable HOC for dayHeader (used in daygrid/timegrid too)\r\n        return (createElement(ContentContainer, { elTag: \"tr\", elClasses: [\r\n                'fc-list-day',\r\n                ...getDayClassNames(dayMeta, theme),\r\n            ], elAttrs: {\r\n                'data-date': formatDayString(dayDate),\r\n            }, renderProps: renderProps, generatorName: \"dayHeaderContent\", customGenerator: options.dayHeaderContent, defaultGenerator: renderInnerContent, classNameGenerator: options.dayHeaderClassNames, didMount: options.dayHeaderDidMount, willUnmount: options.dayHeaderWillUnmount }, (InnerContent) => ( // TODO: force-hide top border based on :first-child\r\n        createElement(\"th\", { scope: \"colgroup\", colSpan: 3, id: cellId, \"aria-labelledby\": textId },\r\n            createElement(InnerContent, { elTag: \"div\", elClasses: [\r\n                    'fc-list-day-cushion',\r\n                    theme.getClass('tableCellShaded'),\r\n                ] })))));\r\n    }\r\n}\r\nfunction renderInnerContent(props) {\r\n    return (createElement(Fragment, null,\r\n        props.text && (createElement(\"a\", Object.assign({ id: props.textId, className: \"fc-list-day-text\" }, props.navLinkAttrs), props.text)),\r\n        props.sideText && ( /* not keyboard tabbable */createElement(\"a\", Object.assign({ \"aria-hidden\": true, className: \"fc-list-day-side-text\" }, props.sideNavLinkAttrs), props.sideText))));\r\n}\r\n\r\nconst DEFAULT_TIME_FORMAT = createFormatter({\r\n    hour: 'numeric',\r\n    minute: '2-digit',\r\n    meridiem: 'short',\r\n});\r\nclass ListViewEventRow extends BaseComponent {\r\n    render() {\r\n        let { props, context } = this;\r\n        let { options } = context;\r\n        let { seg, timeHeaderId, eventHeaderId, dateHeaderId } = props;\r\n        let timeFormat = options.eventTimeFormat || DEFAULT_TIME_FORMAT;\r\n        return (createElement(EventContainer, Object.assign({}, props, { elTag: \"tr\", elClasses: [\r\n                'fc-list-event',\r\n                seg.eventRange.def.url && 'fc-event-forced-url',\r\n            ], defaultGenerator: () => renderEventInnerContent(seg, context) /* weird */, seg: seg, timeText: \"\", disableDragging: true, disableResizing: true }), (InnerContent, eventContentArg) => (createElement(Fragment, null,\r\n            buildTimeContent(seg, timeFormat, context, timeHeaderId, dateHeaderId),\r\n            createElement(\"td\", { \"aria-hidden\": true, className: \"fc-list-event-graphic\" },\r\n                createElement(\"span\", { className: \"fc-list-event-dot\", style: {\r\n                        borderColor: eventContentArg.borderColor || eventContentArg.backgroundColor,\r\n                    } })),\r\n            createElement(InnerContent, { elTag: \"td\", elClasses: ['fc-list-event-title'], elAttrs: { headers: `${eventHeaderId} ${dateHeaderId}` } })))));\r\n    }\r\n}\r\nfunction renderEventInnerContent(seg, context) {\r\n    let interactiveAttrs = getSegAnchorAttrs(seg, context);\r\n    return (createElement(\"a\", Object.assign({}, interactiveAttrs), seg.eventRange.def.title));\r\n}\r\nfunction buildTimeContent(seg, timeFormat, context, timeHeaderId, dateHeaderId) {\r\n    let { options } = context;\r\n    if (options.displayEventTime !== false) {\r\n        let eventDef = seg.eventRange.def;\r\n        let eventInstance = seg.eventRange.instance;\r\n        let doAllDay = false;\r\n        let timeText;\r\n        if (eventDef.allDay) {\r\n            doAllDay = true;\r\n        }\r\n        else if (isMultiDayRange(seg.eventRange.range)) { // TODO: use (!isStart || !isEnd) instead?\r\n            if (seg.isStart) {\r\n                timeText = buildSegTimeText(seg, timeFormat, context, null, null, eventInstance.range.start, seg.end);\r\n            }\r\n            else if (seg.isEnd) {\r\n                timeText = buildSegTimeText(seg, timeFormat, context, null, null, seg.start, eventInstance.range.end);\r\n            }\r\n            else {\r\n                doAllDay = true;\r\n            }\r\n        }\r\n        else {\r\n            timeText = buildSegTimeText(seg, timeFormat, context);\r\n        }\r\n        if (doAllDay) {\r\n            let renderProps = {\r\n                text: context.options.allDayText,\r\n                view: context.viewApi,\r\n            };\r\n            return (createElement(ContentContainer, { elTag: \"td\", elClasses: ['fc-list-event-time'], elAttrs: {\r\n                    headers: `${timeHeaderId} ${dateHeaderId}`,\r\n                }, renderProps: renderProps, generatorName: \"allDayContent\", customGenerator: options.allDayContent, defaultGenerator: renderAllDayInner, classNameGenerator: options.allDayClassNames, didMount: options.allDayDidMount, willUnmount: options.allDayWillUnmount }));\r\n        }\r\n        return (createElement(\"td\", { className: \"fc-list-event-time\" }, timeText));\r\n    }\r\n    return null;\r\n}\r\nfunction renderAllDayInner(renderProps) {\r\n    return renderProps.text;\r\n}\r\n\r\n/*\r\nResponsible for the scroller, and forwarding event-related actions into the \"grid\".\r\n*/\r\nclass ListView extends DateComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.computeDateVars = memoize(computeDateVars);\r\n        this.eventStoreToSegs = memoize(this._eventStoreToSegs);\r\n        this.state = {\r\n            timeHeaderId: getUniqueDomId(),\r\n            eventHeaderId: getUniqueDomId(),\r\n            dateHeaderIdRoot: getUniqueDomId(),\r\n        };\r\n        this.setRootEl = (rootEl) => {\r\n            if (rootEl) {\r\n                this.context.registerInteractiveComponent(this, {\r\n                    el: rootEl,\r\n                });\r\n            }\r\n            else {\r\n                this.context.unregisterInteractiveComponent(this);\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        let { props, context } = this;\r\n        let { dayDates, dayRanges } = this.computeDateVars(props.dateProfile);\r\n        let eventSegs = this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges);\r\n        return (createElement(ViewContainer, { elRef: this.setRootEl, elClasses: [\r\n                'fc-list',\r\n                context.theme.getClass('table'),\r\n                context.options.stickyHeaderDates !== false ?\r\n                    'fc-list-sticky' :\r\n                    '',\r\n            ], viewSpec: context.viewSpec },\r\n            createElement(Scroller, { liquid: !props.isHeightAuto, overflowX: props.isHeightAuto ? 'visible' : 'hidden', overflowY: props.isHeightAuto ? 'visible' : 'auto' }, eventSegs.length > 0 ?\r\n                this.renderSegList(eventSegs, dayDates) :\r\n                this.renderEmptyMessage())));\r\n    }\r\n    renderEmptyMessage() {\r\n        let { options, viewApi } = this.context;\r\n        let renderProps = {\r\n            text: options.noEventsText,\r\n            view: viewApi,\r\n        };\r\n        return (createElement(ContentContainer, { elTag: \"div\", elClasses: ['fc-list-empty'], renderProps: renderProps, generatorName: \"noEventsContent\", customGenerator: options.noEventsContent, defaultGenerator: renderNoEventsInner, classNameGenerator: options.noEventsClassNames, didMount: options.noEventsDidMount, willUnmount: options.noEventsWillUnmount }, (InnerContent) => (createElement(InnerContent, { elTag: \"div\", elClasses: ['fc-list-empty-cushion'] }))));\r\n    }\r\n    renderSegList(allSegs, dayDates) {\r\n        let { theme, options } = this.context;\r\n        let { timeHeaderId, eventHeaderId, dateHeaderIdRoot } = this.state;\r\n        let segsByDay = groupSegsByDay(allSegs); // sparse array\r\n        return (createElement(NowTimer, { unit: \"day\" }, (nowDate, todayRange) => {\r\n            let innerNodes = [];\r\n            for (let dayIndex = 0; dayIndex < segsByDay.length; dayIndex += 1) {\r\n                let daySegs = segsByDay[dayIndex];\r\n                if (daySegs) { // sparse array, so might be undefined\r\n                    let dayStr = formatDayString(dayDates[dayIndex]);\r\n                    let dateHeaderId = dateHeaderIdRoot + '-' + dayStr;\r\n                    // append a day header\r\n                    innerNodes.push(createElement(ListViewHeaderRow, { key: dayStr, cellId: dateHeaderId, dayDate: dayDates[dayIndex], todayRange: todayRange }));\r\n                    daySegs = sortEventSegs(daySegs, options.eventOrder);\r\n                    for (let seg of daySegs) {\r\n                        innerNodes.push(createElement(ListViewEventRow, Object.assign({ key: dayStr + ':' + seg.eventRange.instance.instanceId /* are multiple segs for an instanceId */, seg: seg, isDragging: false, isResizing: false, isDateSelecting: false, isSelected: false, timeHeaderId: timeHeaderId, eventHeaderId: eventHeaderId, dateHeaderId: dateHeaderId }, getSegMeta(seg, todayRange, nowDate))));\r\n                    }\r\n                }\r\n            }\r\n            return (createElement(\"table\", { className: 'fc-list-table ' + theme.getClass('table') },\r\n                createElement(\"thead\", null,\r\n                    createElement(\"tr\", null,\r\n                        createElement(\"th\", { scope: \"col\", id: timeHeaderId }, options.timeHint),\r\n                        createElement(\"th\", { scope: \"col\", \"aria-hidden\": true }),\r\n                        createElement(\"th\", { scope: \"col\", id: eventHeaderId }, options.eventHint))),\r\n                createElement(\"tbody\", null, innerNodes)));\r\n        }));\r\n    }\r\n    _eventStoreToSegs(eventStore, eventUiBases, dayRanges) {\r\n        return this.eventRangesToSegs(sliceEventStore(eventStore, eventUiBases, this.props.dateProfile.activeRange, this.context.options.nextDayThreshold).fg, dayRanges);\r\n    }\r\n    eventRangesToSegs(eventRanges, dayRanges) {\r\n        let segs = [];\r\n        for (let eventRange of eventRanges) {\r\n            segs.push(...this.eventRangeToSegs(eventRange, dayRanges));\r\n        }\r\n        return segs;\r\n    }\r\n    eventRangeToSegs(eventRange, dayRanges) {\r\n        let { dateEnv } = this.context;\r\n        let { nextDayThreshold } = this.context.options;\r\n        let range = eventRange.range;\r\n        let allDay = eventRange.def.allDay;\r\n        let dayIndex;\r\n        let segRange;\r\n        let seg;\r\n        let segs = [];\r\n        for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex += 1) {\r\n            segRange = intersectRanges(range, dayRanges[dayIndex]);\r\n            if (segRange) {\r\n                seg = {\r\n                    component: this,\r\n                    eventRange,\r\n                    start: segRange.start,\r\n                    end: segRange.end,\r\n                    isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),\r\n                    isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),\r\n                    dayIndex,\r\n                };\r\n                segs.push(seg);\r\n                // detect when range won't go fully into the next day,\r\n                // and mutate the latest seg to the be the end.\r\n                if (!seg.isEnd && !allDay &&\r\n                    dayIndex + 1 < dayRanges.length &&\r\n                    range.end <\r\n                        dateEnv.add(dayRanges[dayIndex + 1].start, nextDayThreshold)) {\r\n                    seg.end = range.end;\r\n                    seg.isEnd = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return segs;\r\n    }\r\n}\r\nfunction renderNoEventsInner(renderProps) {\r\n    return renderProps.text;\r\n}\r\nfunction computeDateVars(dateProfile) {\r\n    let dayStart = startOfDay(dateProfile.renderRange.start);\r\n    let viewEnd = dateProfile.renderRange.end;\r\n    let dayDates = [];\r\n    let dayRanges = [];\r\n    while (dayStart < viewEnd) {\r\n        dayDates.push(dayStart);\r\n        dayRanges.push({\r\n            start: dayStart,\r\n            end: addDays(dayStart, 1),\r\n        });\r\n        dayStart = addDays(dayStart, 1);\r\n    }\r\n    return { dayDates, dayRanges };\r\n}\r\n// Returns a sparse array of arrays, segs grouped by their dayIndex\r\nfunction groupSegsByDay(segs) {\r\n    let segsByDay = []; // sparse array\r\n    let i;\r\n    let seg;\r\n    for (i = 0; i < segs.length; i += 1) {\r\n        seg = segs[i];\r\n        (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = []))\r\n            .push(seg);\r\n    }\r\n    return segsByDay;\r\n}\r\n\r\nvar css_248z = \":root{--fc-list-event-dot-width:10px;--fc-list-event-hover-bg-color:#f5f5f5}.fc-theme-standard .fc-list{border:1px solid var(--fc-border-color)}.fc .fc-list-empty{align-items:center;background-color:var(--fc-neutral-bg-color);display:flex;height:100%;justify-content:center}.fc .fc-list-empty-cushion{margin:5em 0}.fc .fc-list-table{border-style:hidden;width:100%}.fc .fc-list-table tr>*{border-left:0;border-right:0}.fc .fc-list-sticky .fc-list-day>*{background:var(--fc-page-bg-color);position:sticky;top:0}.fc .fc-list-table thead{left:-10000px;position:absolute}.fc .fc-list-table tbody>tr:first-child th{border-top:0}.fc .fc-list-table th{padding:0}.fc .fc-list-day-cushion,.fc .fc-list-table td{padding:8px 14px}.fc .fc-list-day-cushion:after{clear:both;content:\\\"\\\";display:table}.fc-theme-standard .fc-list-day-cushion{background-color:var(--fc-neutral-bg-color)}.fc-direction-ltr .fc-list-day-text,.fc-direction-rtl .fc-list-day-side-text{float:left}.fc-direction-ltr .fc-list-day-side-text,.fc-direction-rtl .fc-list-day-text{float:right}.fc-direction-ltr .fc-list-table .fc-list-event-graphic{padding-right:0}.fc-direction-rtl .fc-list-table .fc-list-event-graphic{padding-left:0}.fc .fc-list-event.fc-event-forced-url{cursor:pointer}.fc .fc-list-event:hover td{background-color:var(--fc-list-event-hover-bg-color)}.fc .fc-list-event-graphic,.fc .fc-list-event-time{white-space:nowrap;width:1px}.fc .fc-list-event-dot{border:calc(var(--fc-list-event-dot-width)/2) solid var(--fc-event-border-color);border-radius:calc(var(--fc-list-event-dot-width)/2);box-sizing:content-box;display:inline-block;height:0;width:0}.fc .fc-list-event-title a{color:inherit;text-decoration:none}.fc .fc-list-event.fc-event-forced-url:hover a{text-decoration:underline}\";\r\ninjectStyles(css_248z);\r\n\r\nexport { ListView };\r\n", "import { createPlugin } from '@fullcalendar/core/index.js';\r\nimport { ListView } from './internal.js';\r\nimport { identity, createFormatter } from '@fullcalendar/core/internal.js';\r\nimport '@fullcalendar/core/preact.js';\r\n\r\nconst OPTION_REFINERS = {\r\n    listDayFormat: createFalsableFormatter,\r\n    listDaySideFormat: createFalsableFormatter,\r\n    noEventsClassNames: identity,\r\n    noEventsContent: identity,\r\n    noEventsDidMount: identity,\r\n    noEventsWillUnmount: identity,\r\n    // noEventsText is defined in base options\r\n};\r\nfunction createFalsableFormatter(input) {\r\n    return input === false ? null : createFormatter(input);\r\n}\r\n\r\nvar index = createPlugin({\r\n    name: '@fullcalendar/list',\r\n    optionRefiners: OPTION_REFINERS,\r\n    views: {\r\n        list: {\r\n            component: ListView,\r\n            buttonTextKey: 'list',\r\n            listDayFormat: { month: 'long', day: 'numeric', year: 'numeric' }, // like \"January 1, 2016\"\r\n        },\r\n        listDay: {\r\n            type: 'list',\r\n            duration: { days: 1 },\r\n            listDayFormat: { weekday: 'long' }, // day-of-week is all we need. full date is probably in headerToolbar\r\n        },\r\n        listWeek: {\r\n            type: 'list',\r\n            duration: { weeks: 1 },\r\n            listDayFormat: { weekday: 'long' },\r\n            listDaySideFormat: { month: 'long', day: 'numeric', year: 'numeric' },\r\n        },\r\n        listMonth: {\r\n            type: 'list',\r\n            duration: { month: 1 },\r\n            listDaySideFormat: { weekday: 'long' }, // day-of-week is nice-to-have\r\n        },\r\n        listYear: {\r\n            type: 'list',\r\n            duration: { year: 1 },\r\n            listDaySideFormat: { weekday: 'long' }, // day-of-week is nice-to-have\r\n        },\r\n    },\r\n});\r\n\r\nexport { index as default };\r\n"],
  "mappings": "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",
  "names": []
}
