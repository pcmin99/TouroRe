<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.example.coding.dao.AdminDAO">

	<!-- ******************* BoardDAO에 메소드명이랑 동일 ( id 값이 )  -->
										<!-- 원래 : com.example.domain.BoardVO -->

	<!-- 여행지 리스트 단순 Select index 사용 확인 O-->
	<select id="tourList" resultType="AdminTourVO">
		SELECT tour_name tourName, tour_num tourNum
		FROM tour
	</select>
	
	<!-- 여행지 디테일 페이지
	VO 교체 O
	db explain 확인 O
	-->
	<select id="tourdetail" parameterType="AdminTourDetailVO" resultType="AdminTourDetailVO">
		SELECT
		t.tour_content,
		t.tour_addr,
		t.tour_site_addr,
		t.tour_star,
		t.tour_num,
		t.tour_name,
		ig.img_path
		FROM tour t
		LEFT OUTER JOIN img_detail id ON id.tour_num = t.tour_num
		LEFT OUTER JOIN img ig ON ig.img_num = id.img_num
		WHERE t.tour_num = #{tourNum}
	</select>

	<!-- 여행지 삭제 -->
	<delete id="deleteNum" parameterType="AdminVO" >
		DELETE FROM tour WHERE tour_num = #{tour_num} AND NOT EXISTS (SELECT 1 FROM touroview WHERE touroview.tour_num = tour.tour_num);

	</delete>

	<!--여행지 등록 -->
	<insert id="tourInsert" parameterType="AdminVO">
		INSERT INTO tour (tour_name, tour_addr, tour_content, tour_site_addr, tour_img1_path)
		VALUES (#{tour_name}, #{tour_addr}, #{tour_content}, #{tour_site_addr}, #{tour_img1_path})
	</insert>
	
	<!--유저 리스트
	 VO 변경 완

	 -->
	<select id = "userList" parameterType="AdminUserVO" resultType="AdminUserVO">
		SELECT
		u.user_id userId,
		u.user_name userName, 
		u.user_pass userPass, 
		u.user_tel userTel,
		u.user_email userEmail, 
		u.user_addr userAddr, 
		u.user_gender userGender, 
		u.user_age userAge,
		u.admin_authority  adminAuthority ,             
		u.user_login_authority userLoginAuthority,         
		u.user_register_date userRegisterDate,              
		u.user_delete_date userDeleteDate,
		i.img_real_name imgRealName
		FROM `user` u
		LEFT JOIN
			`img_detail` imgde ON u.user_id = imgde.user_id
		LEFT JOIN
			`img` i ON imgde.img_num = i.img_num
		WHERE u.admin_authority = 1;
	</select>


	<!-- 후기 게시판 리스트
	JOIN 순서 리뷰 < 신고 < 여행지 < 좋아요
	-->
	<select  id="touroviewList" parameterType="AdminTouroViewList" resultType="AdminTouroViewList">
		SELECT distinct tvw.user_id user_id , 
		tvw.touroview_content touroview_content, 
		li.like_count like_count, 
		rp.report_count report_count,	
		DATE_FORMAT(tvw.touroview_regdate, '%Y-%m-%d') touroview_regdate, 
		DATE_FORMAT(tvw.touroview_update, '%Y-%m-%d') touroview_update
		,tvw.touroview_title
		,tr.tour_name tour_name
		,tvw.touroview_num touroview_num
		FROM 	touroview tvw
		LEFT  JOIN `report` rp ON rp.touroview_num = tvw.touroview_num
		LEFT  JOIN `tour` tr ON tr.tour_num = tvw.tour_num
		LEFT  JOIN `like` li ON li.touroview_num = tvw.touroview_num
	</select>

	<!-- 후기 게시판 상세 디테일-->
	<select id = "touroViewNum" parameterType="Integer" resultType="AdminVO">
		SELECT *
		FROM touroview tvw
		LEFT OUTER JOIN img_detail id ON id.touroview_num = tvw.touroview_num
		LEFT OUTER JOIN img ig ON ig.img_num = id.img_num
		WHERE tvw.touroview_num = #{touroview_num}
	</select>
	
	<!-- 여행지 이미지 제외 수정-->
	<update id = "modifyTour" parameterType="AdminVO">
	UPDATE tour tr
	SET	tr.tour_content= #{tour_content},
		tr.tour_addr = #{tour_addr},
		tr.tour_site_addr = #{tour_site_addr}
	WHERE tr.tour_num = #{tourNum}
	</update>

	<!-- 후기 게시판 내부에서 검색
	외부 검색 엔진 안쓸시
	Like => FULL TEXT Search 변경
	full text Search
	연관 검색 가능
	like no
	완료
	-->
	<select id = "search_touro" parameterType="AdminSearchTouro" resultType="AdminSearchTouro">
		SELECT
			tvw.user_id user_id,
			li.like_count like_count,
			rp.report_count report_count,
			tvw.touroview_regdate touroview_regdate,
			tvw.touroview_update touroview_update,
			tvw.touroview_title touroview_title,
			tr.tour_name tour_name,
			tvw.touroview_num touroview_num
		FROM touroview tvw
		LEFT JOIN `like` li
			ON li.touroview_num = tvw.touroview_num
		LEFT JOIN `report` rp
			ON rp.touroview_num = tvw.touroview_num
		LEFT JOIN `tour` tr
			ON tr.tour_num = tvw.tour_num
		WHERE
			MATCH(tvw.touroview_title, tvw.user_id)
			AGAINST(#{search_touroplus} in BOOLEAN MODE)
		or
			MATCH(tr.tour_name)
			AGAINST(#{search_touroplus} in BOOLEAN MODE)
	</select>

	<!-- 푸터 가장 높은 별점 여행지 6개만 출력  O -->
	<select id = "footer_tour_list" resultType="FooterTourListVO">
	SELECT tour_num, tour_name, tour_img1_path
	FROM `tour`
	ORDER BY tour_star DESC
	LIMIT 6;
	</select>

	<!--  필요한것 만 완료 O 댓글 보다 여행지가 더 적을 확률이 높아 여행지를 선횅으로 선정: 여행지 < 댓글 < 좋아요 + 서브 쿼리 -->
	<select id ="footer_toroview_list" resultType="FooterTouroViewVO">
		SELECT
			tvw.touroview_num touroview_num,
			SUBSTRING(tvw.touroview_title, 1, 3) AS touroview_title,
			IFNULL(like_data.like_count,0) as like_count,
			t.tour_img1_path tour_img1_path
		FROM tour t
			INNER JOIN touroview tvw ON tvw.tour_num = t.tour_num
			LEFT JOIN (
					SELECT touroview_num, SUM(like_count) as like_count
					FROM `like`
					GROUP BY touroview_num
					) like_data ON like_data.touroview_num = tvw.touroview_num
		ORDER BY like_count DESC
		LIMIT 6;
	</select>


	<!-- 문의 리스트 셀렉 VO 변경 완
	 단순 리스트 -> 모달에 까지 상세 내용 전달 해야 하기에
	 Inqueiry-list = num, user_id, title, proces
	 inqueiry detail = content, user_id tour_num, review_num 등등
	 * = 모든것이 필요하고 모달 까지 정보를 넘겨야 하기에 해당 테이블 전체 SELECT
	 -->
	<select id="inquiry" resultType="InquiryVO">
		SELECT
		iq.* ,
		iqr.inquiry_review_content inquiry_review_content
		FROM `inquiry_review` iqr
		JOIN `inquiry` iq ON  iq.inquiry_num = iqr.inquiry_num
	</select>

</mapper>
